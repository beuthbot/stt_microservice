"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const AppConfig_1 = __importDefault(require("./AppConfig"));
const GatewayAnswer_1 = __importDefault(require("./GatewayAnswer"));
class Service {
    constructor(serviceName, config) {
        this.endpoints = {};
        this.serviceName = serviceName;
        this.config = config !== null && config !== void 0 ? config : new AppConfig_1.default();
        this.app = this.initExpress();
        this.initDefaultRouting();
    }
    start() {
        this.app.listen(this.config.port, () => {
            console.log(`${this.serviceName} listening at http://localhost:${this.config.port}`);
        });
    }
    endpoint(path, handler) {
        if (path.length === 0)
            path = '/';
        if (path[0] !== '/')
            path = '/' + path;
        this.endpoints[path] = handler;
        this.app.post(path, async (req, res) => {
            const gatewayRequest = this.sanitize(req.body.message);
            try {
                const expectedHistory = gatewayRequest.answer.history;
                gatewayRequest.answer = await handler(gatewayRequest, gatewayRequest.answer);
                if (!this.isAnswerValid(gatewayRequest.answer, expectedHistory)) {
                    throw Error('The answer is invalid. Please make sure that you did pass the correct history object, expected to start with following entries: ' +
                        expectedHistory.join(', '));
                }
                res.json(gatewayRequest);
            }
            catch (ex) {
                gatewayRequest.answer.error =
                    'Error in ' + this.serviceName + ': ' + ex.message;
                res.json(gatewayRequest);
            }
        });
    }
    use(){}
    sanitize(message) {
        if (message.answer == undefined) {
            message.answer = new GatewayAnswer_1.default();
        }
        const history = message.history !== undefined ? message.history : [];
        message.answer.history = history.concat([this.serviceName]);
        return message;
    }
    initExpress() {
        const app = express_1.default();
        this.config.middleware.forEach((middleware) => {
            app.use(middleware);
        });
        // app.use(express.static(pathToSwaggerUi)) todo
        app.use(this.config.errorHandler);
        return app;
    }
    isAnswerValid(answer, expectedHistory) {
        return (answer &&
            answer.history &&
            answer.history.length >= expectedHistory.length &&
            answer.history.reduce((prev, curr, idx) => prev && curr === expectedHistory[idx], true));
    }
    initDefaultRouting() {
        this.app.get('/', (req, res) => {
            res.send({
                msg: `Hello from ${this.serviceName}!`,
                requestQuery: req.query,
                requestParams: req.params,
                requestBody: req.body,
            });
        });
    }
}
exports.default = Service;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUEyQztBQUUzQyw0REFBb0M7QUFDcEMsb0VBQTRDO0FBRzVDLE1BQXFCLE9BQU87SUFNMUIsWUFBWSxXQUFtQixFQUFFLE1BQWtCO1FBRjNDLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFHckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLGFBQU4sTUFBTSxjQUFOLE1BQU0sR0FBSSxJQUFJLG1CQUFTLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsSUFBSSxDQUFDLFdBQVcsa0NBQWtDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQ3hFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLE9BRzJCO1FBRTNCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMs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