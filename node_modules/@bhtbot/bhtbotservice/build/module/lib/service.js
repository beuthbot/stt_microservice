import express from 'express';
import AppConfig from './AppConfig';
import GatewayAnswer from './GatewayAnswer';
export default class Service {
    constructor(serviceName, config) {
        this.endpoints = {};
        this.serviceName = serviceName;
        this.config = config ?? new AppConfig();
        this.app = this.initExpress();
        this.initDefaultRouting();
    }
    start() {
        this.app.listen(this.config.port, () => {
            console.log(`${this.serviceName} listening at http://localhost:${this.config.port}`);
        });
    }
    endpoint(path, handler) {
        if (path.length === 0)
            path = '/';
        if (path[0] !== '/')
            path = '/' + path;
        this.endpoints[path] = handler;
        this.app.post(path, async (req, res) => {
            const gatewayRequest = this.sanitize(req.body.message);
            try {
                const expectedHistory = gatewayRequest.answer.history;
                gatewayRequest.answer = await handler(gatewayRequest, gatewayRequest.answer);
                if (!this.isAnswerValid(gatewayRequest.answer, expectedHistory)) {
                    throw Error('The answer is invalid. Please make sure that you did pass the correct history object, expected to start with following entries: ' +
                        expectedHistory.join(', '));
                }
                res.json(gatewayRequest);
            }
            catch (ex) {
                gatewayRequest.answer.error =
                    'Error in ' + this.serviceName + ': ' + ex.message;
                res.json(gatewayRequest);
            }
        });
    }
    sanitize(message) {
        if (message.answer == undefined) {
            message.answer = new GatewayAnswer();
        }
        const history = message.history !== undefined ? message.history : [];
        message.answer.history = history.concat([this.serviceName]);
        return message;
    }
    initExpress() {
        const app = express();
        this.config.middleware.forEach((middleware) => {
            app.use(middleware);
        });
        // app.use(express.static(pathToSwaggerUi)) todo
        app.use(this.config.errorHandler);
        return app;
    }
    isAnswerValid(answer, expectedHistory) {
        return (answer &&
            answer.history &&
            answer.history.length >= expectedHistory.length &&
            answer.history.reduce((prev, curr, idx) => prev && curr === expectedHistory[idx], true));
    }
    initDefaultRouting() {
        this.app.get('/', (req, res) => {
            res.send({
                msg: `Hello from ${this.serviceName}!`,
                requestQuery: req.query,
                requestParams: req.params,
                requestBody: req.body,
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQW9CLE1BQU0sU0FBUyxDQUFDO0FBRTNDLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUc1QyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU87SUFNMUIsWUFBWSxXQUFtQixFQUFFLE1BQWtCO1FBRjNDLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFHckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsSUFBSSxDQUFDLFdBQVcsa0NBQWtDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQ3hFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLE9BRzJCO1FBRTNCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxP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